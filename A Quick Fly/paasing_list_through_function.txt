----------------------------
Passing a List in a function
----------------------------
You’ll often find it useful to pass a list to a function, whether it’s a list of
names, numbers, or more complex objects, such as dictionaries. When you
pass a list to a function, the function gets direct access to the contents of
the list. Let’s use functions to make working with lists more efficient.



------------------------------
Modifying a List in a Function
------------------------------
When you pass a list to a function, the function can modify the list. Any
changes made to the list inside the function’s body are permanent, allowing
you to work efficiently even when you’re dealing with large amounts of data.

------------
NOTE TAKING
------------
* Every function should have one specific job. The first function prints each design, and the second
displays the completed models. This is more beneficial than using one function
to do both jobs. If you’re writing a function and notice the function
is doing too many different tasks, try to split the code into two functions.
Remember that you can always call a function from another function,
which can be helpful when splitting a complex task into a series of steps.


-----------------------------------------
Passing an Arbitrary Number of Arguments
-----------------------------------------
Sometimes you won’t know ahead of time how many arguments a function
needs to accept. Fortunately, Python allows a function to collect an arbitrary
number of arguments from the calling statement.

-------------------------------------------
Mixing Positional and Arbitrary Arguments
-------------------------------------------
If you want a function to accept several different kinds of arguments, the
parameter that accepts an arbitrary number of arguments must be placed
last in the function definition. Python matches positional and keyword
arguments first and then collects any remaining arguments in the final
parameter.


---------------------------------
Using Arbitrary Keyword Arguments
---------------------------------
Sometimes you’ll want to accept an arbitrary number of arguments, but you
won’t know ahead of time what kind of information will be passed to the
function. In this case, you can write functions that accept as many key-value
pairs as the calling statement provides. One example involves building user
profiles: you know you’ll get information about a user, but you’re not sure
what kind of information you’ll receive.